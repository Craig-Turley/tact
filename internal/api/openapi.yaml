openapi: 3.0.3
info:
  version: "1.0.0"
  title: Tact Webservice API
servers:
  - description: local service for testing
    url: http://localhost:8080/api/v1
tags:
  - name: Tact
    description: used by Tact application
  - name: Auth
    description: Authentication and session management

paths:
  /auth/{provider}/login:
    get:
      summary: Start OAuth login (may redirect or set cookie)
      tags: [Auth]
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            example: google
      responses:
        "302":
          description: >
            Redirects either to the provider’s login page **or** directly to
            the frontend if session already valid.
          headers:
            Location:
              description: Target redirect URL.
              schema:
                type: string
                format: uri
            Set-Cookie:
              schema:
                type: string
                example: >
                  auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
                  eyJzdWIiOiIxMjM0NTYiLCJwcm92aWRlciI6ImdpdGh1YiJ9.
                  C4Z7l0xZkq1W4g7x9sKk7PqY3wH2; Path=/; Max-Age=2592000;
                  HttpOnly; Secure; SameSite=Lax

  /auth/{provider}/callback:
    get:
      summary: OAuth callback (sets cookie after successful login)
      tags: [Auth]
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
      responses:
        "302":
          description: Redirect to frontend after successful login
          headers:
            Location:
              description: Frontend redirect URL after login.
              schema:
                type: string
                format: uri
            Set-Cookie:
              description: >
                Session cookie containing a JWT.  
                Marked HttpOnly, Secure, and SameSite=Lax for safety.
              schema:
                type: string
                example: >
                  auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
                  eyJzdWIiOiIxMjM0NTYiLCJwcm92aWRlciI6ImdpdGh1YiJ9.
                  C4Z7l0xZkq1W4g7x9sKk7PqY3wH2; Path=/; Max-Age=2592000;
                  HttpOnly; Secure; SameSite=Lax
        "400":
          description: OAuth error or invalid callback

  /auth/user:
    get:
      summary: Get current user profile (requires auth cookie)
      tags: [Auth]
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Current user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: Missing or invalid session cookie

  /auth/logout:
    post:
      summary: Invalidates the user's current auth cookie
      operationId: logoutUser
      tags: [Auth]
      security:
        - cookieAuth: []
      responses:
        "204":
          description: Successfully logged out
        "401":
          description: Missing or invalid session cookie

  /job/user/{user_id}:
    get:
      summary: Get all job IDs for a user
      description: >
        Returns the list of job IDs owned by the specified user, wrapped in `data`.
        (Server may later validate that the path user_id matches the current session.)
      tags: [Tact]
      parameters:
        - in: path
          name: user_id
          required: true
          description: The provider-scoped user identifier (e.g., "github|1234567").
          schema:
            type: string
        - in: query
          name: job_type
          required: false
          description: Optional filter to return only jobs of the given type.
          schema:
            $ref: '#/components/schemas/JobType'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: number
              examples:
                sample:
                  value:
                    data:
                      - 147258369012345678
                      - 147258369012345679
                      - 147258369012345680
        '400':
          description: Bad request (missing or invalid user_id)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                missingUserId:
                  value:
                    error: "No User Id provided in the path"
        '404':
          description: User or jobs not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                notFound:
                  value:
                    error: "The requested resource could not be found."

  /job/new:
    post:
      summary: Create a new job
      tags: [Tact]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
            examples:
              emailJob:
                summary: Email job
                value:
                  job_id: "147258369012345678"
                  name: "Welcome email"
                  retry_limit: 3
                  job_type: "email"
                  email_data:
                    job_id: "147258369012345678"
                    list_id: "998877665544332211"
      responses:
        '201':
          description: Job created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
              examples:
                emailJob:
                  value:
                    job_id: "147258369012345678"
                    name: "Welcome email"
                    retry_limit: 3
                    job_type: "email"
                    email_data:
                      job_id: "147258369012345678"
                      list_id: "998877665544332211"

  /email/list:
    post:
      summary: Create a new audience list
      description: Creates a contact list owned by a user and returns the new list ID wrapped in `data`.
      tags: [Tact]
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateListRequest'
            examples:
              create:
                value:
                  name: "Early Access"
                  user_id: "github|1234567"
      responses:
        '201':
          description: List created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        type: number
                        example: 998877665544332211
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '409':
          description: Conflict

  /email/list/{list_id}:
    get:
      summary: Get subscribers for a list
      description: Returns subscriber records for the specified list, wrapped in `data`.
      tags: [Tact]
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: list_id
          required: true
          schema:
            type: string
          description: The audience list ID.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/SubscriberInformation'
              example:
                data:
                  - id: "987654321098765432"
                    firstName: "Jane"
                    lastName: "Doe"
                    email: "jane.doe@example.com"
                    listId: "123456789012345678"
                    isSubscribed: true
                  - id: "876543210987654321"
                    firstName: "John"
                    lastName: "Smith"
                    email: "john.smith@example.com"
                    listId: "123456789012345678"
                    isSubscribed: false
        '401':
          description: Unauthorized
        '404':
          description: List not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /email/lists/{user_id}:
    get:
      summary: Get all email lists for a user
      description: Returns all email lists associated with the given user, wrapped in `data`.
      tags: [Tact]
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: The owner’s user ID.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Envelope'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/EmailListData'
              example:
                data:
                  - list_id: "998877665544332211"
                    name: "Early Access"
                    user_id: "github|1234567"
                    subscriber_count: 42
                  - list_id: "112233445566778899"
                    name: "Newsletter"
                    user_id: "github|1234567"
                    subscriber_count: 7
        '401':
          description: Unauthorized
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /email/list/{list_id}/subscribe:
    post:
      summary: Subscribe contacts to a list
      description: Accepts an array of subscriber objects and subscribes them to the list.
      tags: [Tact]
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: list_id
          required: true
          schema:
            type: string
          description: The audience list ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SubscriberInformation'
      responses:
        '202':
          description: Accepted for processing
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '404':
          description: List not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: auth

  schemas:
    Error:
      type: object
      required: [error]
      properties:
        error:
          type: string
          example: The requested job could not be found.

    Envelope:
      type: object
      required: [data]
      properties:
        data: {}

    User:
      type: object
      additionalProperties: false
      required:
        - user_id
        - email
      properties:
        user_id:
          type: string
          description: Stable user identifier (e.g., database or subject/`sub` claim).
          example: user_123
        email:
          type: string
          format: email
          example: lee@example.com
        name:
          type: string
          description: Full display name.
          example: Lee Jones
        nick_name:
          type: string
          description: Short handle or nickname.
          example: leej
        avatar_url:
          type: string
          format: uri
          description: Public URL to the avatar image.
          example: https://cdn.example.com/avatars/user_123.png
        provider:
          type: string
          description: OAuth provider that authenticated the session.
          example: github

    Job:
      oneOf:
        - $ref: '#/components/schemas/EmailJob'
      discriminator:
        propertyName: job_type
        mapping:
          email: '#/components/schemas/EmailJob'
      description: >
        A job with common fields and type-specific payload. Discriminated by `job_type`.

    JobBase:
      type: object
      required: [job_id, name, retry_limit, job_type]
      properties:
        job_id:
          type: string
          description: Snowflake ID of the job
        name:
          type: string
        retry_limit:
          type: integer
        job_type:
          $ref: '#/components/schemas/JobType'

    EmailJob:
      allOf:
        - $ref: '#/components/schemas/JobBase'
        - type: object
          required: [email_data]
          properties:
            job_type:
              $ref: '#/components/schemas/JobTypeEmail'
            email_data:
              $ref: '#/components/schemas/EmailData'

    EmailData:
      type: object
      required: [job_id, list_id]
      properties:
        job_id:
          type: string
          description: Snowflake ID of the job
        list_id:
          type: string
          description: Snowflake ID of the list

    EmailListData:
      type: object
      required: [list_id, name, user_id, subscriber_count]
      properties:
        list_id:
          type: string
          description: Snowflake ID of the list
        name:
          type: string
          description: User input name of the list
        user_id:
          type: string
          description: User Id of the owner of the list provided by goth
        subscriber_count:
          type: integer
          description: Count of the number of subscribers subscribed

    JobType:
      type: string
      description: Public enum (string) mapped to backend uint8
      enum: [start, custom, email, slack, discord, end]
      example: email
      x-enum-varnames: [TypeStart, TypeCustom, TypeEmail, TypeSlack, TypeDiscord, TypeEnd]
      x-enum-values: [0, 1, 2, 3, 4, 5]

    JobTypeEmail:
      type: string
      enum: [email]
    JobTypeSlack:
      type: string
      enum: [slack]
    JobTypeDiscord:
      type: string
      enum: [discord]
    JobTypeCustom:
      type: string
      enum: [custom]

    SubscriberInformation:
      type: object
      properties:
        id:
          type: string
          format: snowflake
          description: Unique identifier for the subscriber
          example: "987654321098765432"
        firstName:
          type: string
          description: Subscriber's first name
          example: "Jane"
        lastName:
          type: string
          description: Subscriber's last name
          example: "Doe"
        email:
          type: string
          format: email
          description: Subscriber's email address
          example: "jane.doe@example.com"
        listId:
          type: string
          format: snowflake
          description: Identifier of the list the subscriber belongs to
          example: "123456789012345678"
        isSubscribed:
          type: boolean
          description: Whether the subscriber is currently subscribed
          example: true
      required:
        - firstName
        - lastName
        - email
        - listId
        - isSubscribed

    CreateListRequest:
      type: object
      required: [name, user_id]
      properties:
        name:
          type: string
          example: Early Access
        user_id:
          type: string
          example: github|1234567
